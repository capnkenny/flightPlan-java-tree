import TreePackage.*;import java.util.Iterator;/**   A class that implements the ADT sorted list by using a   binary search tree. Duplicate entries are not allowed.      @author Charles Hoot, Frank M. Carrano   @version 3.0*/public class BstSortedList<T extends Comparable<? super T>> 	implements SortedListNoDuplicatesInterface<T>{	private BinarySearchTree<T> tree;	public BstSortedList() 	{		tree = new BinarySearchTree<T>();	} // end default constructor	// because our binary search tree does not allow duplicates,	// we return false if a value is already in the tree	public boolean add(T newEntry) 	{		boolean result = false;				if(!tree.contains(newEntry))			result = true;		tree.add(newEntry);				return result;	} // end add	public boolean remove(T anEntry) 	{		return tree.remove(anEntry) != null;	} // end remove	public int getPosition(T anEntry) 	{		int position = 1;		boolean found = false;				Iterator<T> iterator = tree.getInorderIterator();				while (iterator.hasNext() && !found) 		{			T entry = iterator.next();									if (entry.compareTo(anEntry) == 0)				found = true;			else if (entry.compareTo(anEntry) > 0) 			{				found = true; // entry is not in list				position = -position;			}			else				position++;		} // end while		return position;	} // end getPosition	public T getEntry(int givenPosition) 	{		int position = 1;		Iterator<T> iterator = tree.getInorderIterator();		T entry = null;		while (iterator.hasNext() && position <= givenPosition) 		{			entry = iterator.next();			position++;		} // end while		return entry;	} // end getEntry	public boolean contains(T anEntry) 	{		return tree.contains(anEntry);	} // end contains	public T remove(int givenPosition) 	{		T entry = getEntry(givenPosition);		remove(entry);				return entry;	} // end remove	public void clear() 	{		tree.clear();	} // end clear	public int getLength() 	{		return tree.getNumberOfNodes();	} // end getLength	public boolean isEmpty() 	{		return tree.isEmpty();	} // end isEmpty	public T[] toArray() 	{      // the cast is safe because the new array contains null entries      @SuppressWarnings("unchecked")      T[] result = (T[])new Comparable[tree.getNumberOfNodes()];		Iterator<T> iterator = tree.getInorderIterator();      int index = 0;		while (iterator.hasNext())       {			result[index] = iterator.next();         index++;      } // end while            return result;	} // end toArray} // end BstSortedList